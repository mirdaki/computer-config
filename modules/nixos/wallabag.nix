# Auto-generated using compose2nix v0.3.2-pre.

# I tried connecting to my postgres database, but it never seemed to be able to find it, despite me trying multiple approaches
{
  pkgs,
  lib,
  config,
  ...
}:

let
  cfg = config.wallabag;
in
{
  options = {
    wallabag.enable = lib.mkEnableOption "enable wallabag module";

    wallabag.domainName = lib.mkOption { type = lib.types.str; };
    wallabag.certHostDomainName = lib.mkOption { type = lib.types.str; };
    wallabag.dataDir = lib.mkOption { type = lib.types.str; };

    wallabag.user = lib.mkOption {
      type = lib.types.str;
      default = "wallabag";
    };

    wallabag.group = lib.mkOption {
      type = lib.types.str;
      default = "wallabag";
    };

    wallabag.port = lib.mkOption {
      type = lib.types.port;
      default = 8883;
    };
  };

  config = lib.mkIf cfg.enable {

    services.nginx = {
      enable = true;
      virtualHosts."${cfg.domainName}" = {
        # Wallabag does not support other authentication methods and it's clients don't work with an SSO proxy
        # enableAuthelia = true;
        forceSSL = true;
        useACMEHost = cfg.certHostDomainName;
        locations."/" = {
          proxyPass = "http://127.0.0.1:${builtins.toString cfg.port}";
        };
      };
    };

    # Create mount point for data directory
    systemd.tmpfiles.rules = [
      "d ${cfg.dataDir} 0755 ${cfg.user} ${cfg.group}"
      "d ${cfg.dataDir}/data 0755 ${cfg.user} ${cfg.group}"
      "d ${cfg.dataDir}/images 0755 ${cfg.user} ${cfg.group}"
    ];

    # Runtime
    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
      dockerCompat = true;
    };

    # Enable container name DNS for all Podman networks.
    networking.firewall.interfaces =
      let
        matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
      in
      {
        "${matchAll}".allowedUDPPorts = [ 53 ];
      };

    virtualisation.oci-containers.backend = "podman";

    # Containers
    virtualisation.oci-containers.containers."wallabag" = {
      image = "docker.io/wallabag/wallabag";
      environment = {
        "SYMFONY__ENV__DOMAIN_NAME" = "https://${cfg.domainName}";
        "SYMFONY__ENV__FOSUSER_REGISTRATION" = "false";
      };
      volumes = [
        "${cfg.dataDir}/data:/var/www/wallabag/data:rw"
        "${cfg.dataDir}/images:/var/www/wallabag/web/assets/images:rw"
      ];
      ports = [
        "${builtins.toString cfg.port}:80/tcp"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=wallabag"
        "--network=wallabag_default"
      ];
    };

    systemd.services."podman-wallabag" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "no";
      };
      after = [
        "podman-network-wallabag_default.service"
      ];
      requires = [
        "podman-network-wallabag_default.service"
      ];
      partOf = [
        "podman-compose-wallabag-root.target"
      ];
      wantedBy = [
        "podman-compose-wallabag-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-wallabag_default" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f wallabag_default";
      };
      script = ''
        podman network inspect wallabag_default || podman network create wallabag_default
      '';
      partOf = [ "podman-compose-wallabag-root.target" ];
      wantedBy = [ "podman-compose-wallabag-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-wallabag-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

    users = {
      users."${cfg.user}" = {
        isSystemUser = true;
        group = cfg.group;
      };
      groups."${cfg.group}" = { };
    };

  };
}
